/*
 * main.cpp
 * Written by: Mark Koh
 * 2/14/2013
 *
 * Description: Based off of the action_script demo written by robotis corp.,
 * this program will recieve UDP packets from a localhost client in order to 
 * execute scripts in sync with the beat of a live audio signal.
 *
 */

#include <unistd.h>
#include <string.h>
#include <string>
#include <libgen.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <signal.h>
#include <termios.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>

//#include "Camera.h"
#include "Point.h"
#include "mjpg_streamer.h"
#include "minIni.h"
//#include "LinuxCamera.h"
//#include "ColorFinder.h"

#include "Action.h"
#include "Head.h"
#include "Walking.h"
#include "MX28.h"
#include "MotionManager.h"
#include "LinuxMotionTimer.h"
#include "LinuxCM730.h"
#include "LinuxActionScript.h"

#ifdef MX28_1024
#define MOTION_FILE_PATH    "../../../Data/motion_1024.bin"
#else
#define MOTION_FILE_PATH    "../../../Data/motion_4096.bin"
#endif

#define PORT 9930
#define BUFLEN 70
#define SAMPLE_RATE (44100)

void change_current_dir()
{
    char exepath[1024] = {0};
    if(readlink("/proc/self/exe", exepath, sizeof(exepath)) != -1)
        chdir(dirname(exepath));
}

void sighandler(int sig)
{
    struct termios term;
        Action::GetInstance()->Start(1);    /* Init(stand up) pose */
    tcgetattr( STDIN_FILENO, &term );
    term.c_lflag |= ICANON | ECHO;
    tcsetattr( STDIN_FILENO, TCSANOW, &term );

    exit(0);
}


int main(void)
{   
    signal(SIGABRT, &sighandler);
    signal(SIGTERM, &sighandler);
    signal(SIGQUIT, &sighandler);
    signal(SIGINT, &sighandler);

    /* Decalre server and socket variables */
    struct sockaddr_in sad; //Structure to hold server IP Address
    struct sockaddr_in cad; //Structure to hold client IP Address
    int serverSocket; //Socket descriptor
    int slen=sizeof(cad);
    char buf[BUFLEN];
    //int buf;
    //struct hostent *ptrh; //Pointer to host table entry

    
    printf( "\n=====   BeatTracker Dance Script Program   =====\n");
    printf(   "=====               Mark Koh               =====\n\n");

    change_current_dir();

    Action::GetInstance()->LoadFile(MOTION_FILE_PATH);

    //////////////////// Framework Initialize ////////////////////////////
    LinuxCM730 linux_cm730("/dev/ttyUSB0");
    CM730 cm730(&linux_cm730);
    if(MotionManager::GetInstance()->Initialize(&cm730) == false)
    {
        printf("Fail to initialize Motion Manager!\n");
            return 0;
    }
    MotionManager::GetInstance()->AddModule((MotionModule*)Action::GetInstance());
    LinuxMotionTimer *motion_timer = new LinuxMotionTimer(MotionManager::GetInstance());
    motion_timer->Start();
    /////////////////////////////////////////////////////////////////////

    // Start dancing!
    int current = 0;
    int dancePoses[] = {110,111,112,113,114};
    int basePoses[]  = {100,101};
    char poseNames[][20] = {"dance1","dance2","arms_air","funky_chick_right","funky_chick_left"};
    char baseNames[][20] = {"head_down","head_up"};
    int numPoses = sizeof(dancePoses)/sizeof(int);
    int numBases = sizeof(basePoses)/sizeof(int);
    int base = 0;

    srand (time(NULL));

    MotionManager::GetInstance()->SetEnable(true);

    Action::GetInstance()->Start(1);    /* Init(stand up) pose */
    while(Action::GetInstance()->IsRunning()) usleep(8*1000);

    printf("Press the ENTER key to begin!\n");
    getchar();
    
/*
    while(1) {
      getchar();
      Action::GetInstance()->Start(80);    // call headbop 
      while(Action::GetInstance()->IsRunning()) usleep(8*1000);
    }
*/    

    while(1) {
      getchar();
      if (base == 0) {
        current = rand()%numBases;
        printf("Playing action %d, '%s'...",current, baseNames[current]);
        Action::GetInstance()->Start( basePoses[current] );    // Call pose 
        while(Action::GetInstance()->IsRunning()) usleep(8*1000);
        base = 1;
      }
      else if (base == 1) {
        current = rand()%numPoses;
        printf("Playing action %d, '%s'...",current, poseNames[current]);
        Action::GetInstance()->Start( dancePoses[current] );    // Call pose 
        while(Action::GetInstance()->IsRunning()) usleep(8*1000);
        //current = (current + 1)%numPoses;
        base = 0;
      }
    }

    
    /*
    while(1) {
      getchar();
      if (current == 0) { 
        printf("Sitting down...");
        Action::GetInstance()->Start(15);    // Init(sit down) pose 
        while(Action::GetInstance()->IsRunning()) usleep(8*1000);
        current = 1;
      }
      else if (current == 1) {
        printf("Standing up...");
        Action::GetInstance()->Start(1);    // Init(stand up) pose 
        while(Action::GetInstance()->IsRunning()) usleep(8*1000);
        current = 0;
      }
    }

  */
   
   /*
    if ((serverSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1) {
      printf("Unable to connect to server.  Exiting...\n");
      exit(0);
    }
    
    memset((char*) &sad, 0, sizeof(sad));
    sad.sin_family = AF_INET;
    sad.sin_port = htons(PORT);
    sad.sin_addr.s_addr = htonl(INADDR_ANY);

    if(bind(serverSocket,(struct sockaddr*)&sad,sizeof(sad))==-1) {
      printf("Unable to bind socket.  Exiting...\n");
      close(serverSocket);
      exit(0);
    }
    else {
      while(1) {
        if( recvfrom(serverSocket, buf, BUFLEN, 0, (struct sockaddr *)&cad, (socklen_t*)&slen) == -1 ) {
          printf("Unable to recieve packet from client.  Exiting...\n");
          close(serverSocket);
          exit(0);
        }
        else {
          //Do all activities when a beat is detected
          printf("Recieved packet from BeatTracker.\n");
          if (current == 0) {
            Action::GetInstance()->Start(80);    // call head_down 
            while(Action::GetInstance()->IsRunning()) usleep(8*1000);
            current = 1;
          }
          else if (current == 1) {
            Action::GetInstance()->Start(81);    // call head_up 
            while(Action::GetInstance()->IsRunning()) usleep(8*1000);
            current = 0;           
          }
        }
      }
    }
    */

    /*
    LinuxActionScript::ScriptStart("script.asc");
    while(LinuxActionScript::m_is_running == 1) sleep(10);
    */

    return 0;
}

